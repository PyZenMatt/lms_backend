name: CI

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]
  workflow_dispatch: {}
  release:
    types: [created]

concurrency:
  group: "ci-${{ github.ref }}"
  cancel-in-progress: true

jobs:
  backend:
    name: Backend tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

      - name: Install backend deps
        run: |
          python -m pip install --upgrade pip
          pip install -r lms_backend/requirements.txt

      - name: Run migrations and tests
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
        run: |
          cd lms_backend
          python manage.py migrate --noinput
          pytest -q --maxfail=1 --disable-warnings

      - name: Upload coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: lms_backend/htmlcov || coverage.xml || ''

  frontend:
    name: Frontend build
    runs-on: ubuntu-latest
    needs: backend
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install frontend deps
        run: |
          cd lms-frontend
          npm ci

      - name: Lint frontend
        run: |
          cd lms-frontend
          npm run lint || true

      - name: Build frontend
        run: |
          cd lms-frontend
          npm run build

      - name: Upload frontend artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: lms-frontend/dist

  docker-smoke:
    name: Docker smoke (optional)
    runs-on: ubuntu-latest
    if: false
    steps:
      - uses: actions/checkout@v4
      - name: Build docker images
        run: |
          docker build -f lms_backend/Dockerfile -t school-backend:ci .
          docker build -f lms-frontend/Dockerfile -t school-frontend:ci lms-frontend
