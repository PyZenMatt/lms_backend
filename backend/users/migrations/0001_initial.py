# Generated by Django 4.2.11 on 2025-06-16 03:31

from decimal import Decimal
from django.conf import settings
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_approved', models.BooleanField(default=False, help_text='Solo gli insegnanti approvati da admin possono pubblicare corsi/lezioni.')),
                ('bio', models.TextField(blank=True, help_text='Breve biografia (opzionale).', null=True)),
                ('avatar', models.ImageField(blank=True, help_text='Immagine di profilo (opzionale).', null=True, upload_to='avatars/')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('is_email_verified', models.BooleanField(default=False)),
                ('role', models.CharField(choices=[('student', 'Studente'), ('teacher', 'Maestro'), ('admin', 'Amministratore')], error_messages={'invalid_choice': '"%(value)s" non Ã¨ una scelta valida.'}, max_length=10)),
                ('email_verification_token', models.CharField(blank=True, max_length=100)),
                ('address', models.TextField(blank=True, null=True)),
                ('phone', models.CharField(blank=True, max_length=30)),
                ('wallet_address', models.CharField(blank=True, help_text='Indirizzo wallet Ethereum/Polygon per TeoCoins', max_length=42, null=True)),
                ('profession', models.CharField(blank=True, help_text='Professione artistica (es. illustratore, pittore ad olio, scultore)', max_length=100, null=True)),
                ('artistic_aspirations', models.TextField(blank=True, help_text='Aspirazioni e specializzazioni artistiche', null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Utente',
                'verbose_name_plural': 'Utenti',
            },
        ),
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('icon', models.CharField(default='award', max_length=50)),
                ('color', models.CharField(default='#feca57', max_length=7)),
                ('points_required', models.PositiveIntegerField(default=0)),
                ('achievement_type', models.CharField(choices=[('course_completion', 'Course Completion'), ('streak', 'Learning Streak'), ('score', 'High Score'), ('participation', 'Participation'), ('special', 'Special Achievement')], max_length=50)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Achievement',
                'verbose_name_plural': 'Achievements',
            },
        ),
        migrations.CreateModel(
            name='UserSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email_notifications', models.BooleanField(default=True)),
                ('push_notifications', models.BooleanField(default=False)),
                ('course_reminders', models.BooleanField(default=True)),
                ('weekly_digest', models.BooleanField(default=True)),
                ('marketing_emails', models.BooleanField(default=False)),
                ('theme', models.CharField(choices=[('light', 'Light'), ('dark', 'Dark')], default='light', max_length=10)),
                ('language', models.CharField(default='it', max_length=5)),
                ('timezone', models.CharField(default='Europe/Rome', max_length=50)),
                ('show_profile', models.BooleanField(default=True)),
                ('show_progress', models.BooleanField(default=False)),
                ('show_achievements', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='settings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Impostazioni Utente',
                'verbose_name_plural': 'Impostazioni Utenti',
            },
        ),
        migrations.CreateModel(
            name='UserProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_courses_enrolled', models.PositiveIntegerField(default=0)),
                ('total_courses_completed', models.PositiveIntegerField(default=0)),
                ('total_lessons_completed', models.PositiveIntegerField(default=0)),
                ('total_exercises_completed', models.PositiveIntegerField(default=0)),
                ('total_hours_studied', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10)),
                ('average_score', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=5)),
                ('last_activity_date', models.DateTimeField(blank=True, null=True)),
                ('streak_days', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='progress', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Progresso Utente',
                'verbose_name_plural': 'Progressi Utenti',
            },
        ),
        migrations.CreateModel(
            name='UserAchievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('earned_date', models.DateTimeField(auto_now_add=True)),
                ('progress_percentage', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=5)),
                ('achievement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.achievement')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='earned_achievements', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Achievement Utente',
                'verbose_name_plural': 'Achievements Utenti',
                'unique_together': {('user', 'achievement')},
            },
        ),
    ]
